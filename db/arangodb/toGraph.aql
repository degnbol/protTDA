FOR af IN AF
    INSERT { _key: af._key, n: af.n } INTO AFProt
    FOR i IN 0..af.n-1
        LET ca = CONCAT(af._key, "_", i+1)
        INSERT {
            _key: ca,
            x: af.x[i], y: af.y[i], z: af.z[i],
            cent1: af.cent1[i], cent2: af.cent2[i]
        } INTO Ca
        INSERT { _from: CONCAT("AFProt/", af._key), _to: CONCAT("Ca/", ca) } INTO hasCa
;

// the following should be a separate call
FOR af IN AF
    FOR r IN 1..LENGTH(af.reps1)
        LET rep = CONCAT(af._key, "_", r+1)
        LET birth = af.bars1[0][r]
        LET death = af.bars1[1][r]
        INSERT { _key: rep, birth: birth, death: death, persistence: death-birth } INTO Rep1
        INSERT { _from: CONCAT("AFProt/", af._key), _to: CONCAT("Rep1/", rep)} INTO hasRep1
        FOR s IN 0..LENGTH(af.reps1[r])-1
            LET simplex = CONCAT(af._key, "_", r+1, "_", s+1)
            INSERT { _key: simplex } INTO Simplex1
            INSERT { _from: CONCAT("Rep1/", rep), _to: CONCAT("Simplex1/", simplex) } INTO hasSimplex1
            FOR c IN af.reps1[r][s]
                INSERT { _from: CONCAT("Simplex1/", simplex), _to: CONCAT("Ca/", af._key, "_", c) } INTO hasCa1

